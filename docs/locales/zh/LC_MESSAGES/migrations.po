# SOME DESCRIPTIVE TITLE.
# Copyright (C) Copyright &copy; 2023, Hsiaoming Yang
# This file is distributed under the same license as the joserfc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  joserfc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-28 11:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh\n"
"Language-Team: zh <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../migrations/authlib.rst:2
msgid "Migrating from Authlib"
msgstr "从 Authlib 迁移到 joserfc"

#: ../../migrations/authlib.rst:4
msgid ""
"``joserfc`` is derived from Authlib and shares similar implementations of"
" algorithms. However, it is important to note that the APIs are different"
" between the two libraries. When migrating your code from Authlib to "
"``joserfc``, you will need to update your code to accommodate the new API"
" structure and functionality."
msgstr ""

#: ../../migrations/authlib.rst:11 ../../migrations/python-jose.rst:85
msgid "JWT"
msgstr ""

#: ../../migrations/authlib.rst:13
msgid ""
"Migrating JWT (JSON Web Token) operations from Authlib to ``joserfc`` "
"involves some considerations regarding security design and the allowed "
"algorithms."
msgstr ""

#: ../../migrations/authlib.rst:17 ../../migrations/pyjwt.rst:11
msgid "jwt.encode"
msgstr ""

#: ../../migrations/authlib.rst:19
msgid ""
"The interface for JWT operations in both ``authlib.jose`` and ``joserfc``"
" is quite similar. In both libraries, you can encode a JWT using the "
"``jwt.encode(header, payload, key)`` method."
msgstr ""

#: ../../migrations/authlib.rst:22 ../../migrations/authlib.rst:80
msgid "Authlib"
msgstr ""

#: ../../migrations/authlib.rst:30 ../../migrations/authlib.rst:92
#: ../../migrations/pyjwt.rst:23 ../../migrations/pyjwt.rst:45
#: ../../migrations/pyjwt.rst:77 ../../migrations/pyjwt.rst:117
#: ../../migrations/pyjwt.rst:136 ../../migrations/python-jose.rst:31
#: ../../migrations/python-jose.rst:72 ../../migrations/python-jose.rst:101
#: ../../migrations/python-jose.rst:122
msgid "joserfc"
msgstr ""

#: ../../migrations/authlib.rst:40 ../../migrations/pyjwt.rst:34
msgid "jwt.decode"
msgstr ""

#: ../../migrations/authlib.rst:42
msgid ""
"The ``jwt.decode`` method in Authlib and ``joserfc`` behaves differently "
"when it comes to claims validation."
msgstr ""

#: ../../migrations/authlib.rst:45
msgid ""
"In Authlib, the ``jwt.decode`` method combines the decoding of the JWT "
"and the validation of its claims into a single step."
msgstr ""

#: ../../migrations/authlib.rst:56
msgid ""
"In ``joserfc``, the ``jwt.decode`` process is split into two steps: "
"decoding the token and then separately validating its claims. This "
"approach provides more flexibility and allows for granular control over "
"the validation process."
msgstr ""

#: ../../migrations/authlib.rst:72
msgid ""
"You can learn more about :ref:`claims validation <claims>` on the "
":ref:`jwt` guide."
msgstr ""

#: ../../migrations/authlib.rst:75 ../../migrations/python-jose.rst:14
msgid "JWS"
msgstr ""

#: ../../migrations/authlib.rst:77
msgid ""
"When migrating JWS (JSON Web Signature) operations from Authlib to "
"``joserfc``, follow these steps:"
msgstr ""

#: ../../migrations/authlib.rst:104
msgid ""
"Above is a simple example of using the ``HS256`` algorithm for JWS. If "
"you would like to explore further and learn more about JWS, we recommend "
"referring to the comprehensive :ref:`jws` guide."
msgstr ""

#: ../../migrations/authlib.rst:109 ../../migrations/python-jose.rst:55
msgid "JWE"
msgstr ""

#: ../../migrations/authlib.rst:111
msgid ""
"The method names for JWE serialization and deserialization are different "
"between Authlib and ``joserfc``."
msgstr ""

#: ../../migrations/authlib.rst:114
msgid "In Authlib, the methods for JWE serialization and deserialization are:"
msgstr ""

#: ../../migrations/authlib.rst:116
msgid "``.serialize_compact(header, payload, key)``"
msgstr ""

#: ../../migrations/authlib.rst:117
msgid "``.deserialize_compact(token, key)``"
msgstr ""

#: ../../migrations/authlib.rst:127
msgid ""
"In ``joserfc``, the equivalent methods for JWE serialization and "
"deserialization are:"
msgstr ""

#: ../../migrations/authlib.rst:129
msgid "``.encrypt_compact(header, payload, key)``"
msgstr ""

#: ../../migrations/authlib.rst:130
msgid "``.decrypt_compact(token, key)``"
msgstr ""

#: ../../migrations/authlib.rst:139
msgid ""
"If you would like to explore further and learn more about JWS, we "
"recommend referring to the comprehensive :ref:`jwe` guide."
msgstr ""

#: ../../migrations/index.rst:2
msgid "Migrations"
msgstr "迁移"

#: ../../migrations/index.rst:4
msgid ""
"Here are some migration guides to help you transition from other "
"libraries to ``joserfc``:"
msgstr ""

#: ../../migrations/pyjwt.rst:2
msgid "Migrating from PyJWT"
msgstr "从 PyJWT 迁移到 joserfc"

#: ../../migrations/pyjwt.rst:4
msgid ""
"When migrating from PyJWT to ``joserfc``, there are a few key differences"
" to be aware of. ``joserfc`` provides implementations for JWS (JSON Web "
"Signature), JWE (JSON Web Encryption), JWK (JSON Web Key), and JWT (JSON "
"Web Token), whereas PyJWT focuses primarily on JWS and JWT. Additionally,"
" joserfc supports both JWT on JWS and JWT on JWE, offering more "
"flexibility for token handling."
msgstr ""

#: ../../migrations/pyjwt.rst:13
msgid ""
"Both PyJWT and joserfc use the ``.encode`` method to generate a JWT, but "
"the parameter structure differs between the two libraries."
msgstr ""

#: ../../migrations/pyjwt.rst:16 ../../migrations/pyjwt.rst:39
#: ../../migrations/pyjwt.rst:65 ../../migrations/pyjwt.rst:111
#: ../../migrations/pyjwt.rst:130
msgid "PyJWT"
msgstr ""

#: ../../migrations/pyjwt.rst:36
msgid ""
"Similarly, both PyJWT and joserfc use the ``.decode`` method to verify "
"and decode a JWT, but the parameter structure differs."
msgstr ""

#: ../../migrations/pyjwt.rst:57
msgid "Non-plain string key"
msgstr ""

#: ../../migrations/pyjwt.rst:59
msgid ""
"When using a non-plain string key (equivalent to an \"oct\" key) in "
"joserfc, such as RSA, EC, or OKP keys, the library provides built-in "
"implementations to handle these key types. This eliminates the need for "
"manual key handling, which is required in PyJWT."
msgstr ""

#: ../../migrations/pyjwt.rst:63
msgid "Let's take an example using an RSA key:"
msgstr ""

#: ../../migrations/pyjwt.rst:93
msgid "Claims validation"
msgstr ""

#: ../../migrations/pyjwt.rst:95
msgid ""
"Both PyJWT and ``joserfc`` provide mechanisms for claims validation, "
"although they differ in their approach."
msgstr ""

#: ../../migrations/pyjwt.rst:98
msgid ""
"In PyJWT, claims validation is performed within the ``.decode`` method "
"itself. When decoding a token, you can specify options such as "
"``verify_exp`` to validate the expiration time, ``verify_aud`` to "
"validate the audience, and other options for additional claim "
"validations. Claims validation is an integral part of the decoding "
"process."
msgstr ""

#: ../../migrations/pyjwt.rst:103
msgid ""
"On the other hand, ``joserfc`` follows a different approach by separating"
" the decoding and claims validation steps. The .decode method in joserfc "
"is focused solely on decoding the token and extracting the header and "
"payload information. Claims validation is performed separately using "
"claims validators."
msgstr ""

#: ../../migrations/pyjwt.rst:109
msgid "Verify \"exp\""
msgstr ""

#: ../../migrations/pyjwt.rst:128
msgid "Required claims"
msgstr ""

#: ../../migrations/pyjwt.rst:149
msgid ""
"The ``JWTClaimsRegistry`` accepts each claim as an `Individual Claims "
"Requests <ClaimsOption>`_ JSON object. You can learn more from "
":ref:`claims`."
msgstr ""

#: ../../migrations/python-jose.rst:2
#, fuzzy
msgid "Migrating from python-jose"
msgstr "从 PyJWT 迁移到 joserfc"

#: ../../migrations/python-jose.rst:4
msgid ""
"``python-jose`` supports all JOSE specifications, similar to ``joserfc``."
" However, there are significant differences in code structure, method "
"names, and parameter usage. Additionally, ``joserfc`` offers built-in "
"Python type hints, enhancing code readability and type safety."
msgstr ""

#: ../../migrations/python-jose.rst:9
msgid ""
"Another key difference is that ``python-jose`` only supports compact "
"serialization and deserialization, whereas ``joserfc`` supports both "
"compact and JSON serialization formats, offering greater flexibility in "
"handling JOSE data."
msgstr ""

#: ../../migrations/python-jose.rst:16
msgid ""
"In ``python-jose``, the methods used for serialization and "
"deserialization are ``jws.sign`` and ``jws.verify``, respectively."
msgstr ""

#: ../../migrations/python-jose.rst:19
msgid ""
"On the other hand, ``joserfc`` uses ``jws.serialize_compact`` for "
"serialization and ``jws.deserialize_compact`` for deserialization."
msgstr ""

#: ../../migrations/python-jose.rst:22 ../../migrations/python-jose.rst:63
#: ../../migrations/python-jose.rst:92
msgid "python-jose"
msgstr ""

#: ../../migrations/python-jose.rst:46
msgid ""
"``joserfc`` is designed to be highly explicit, requiring the use of "
"specific key types, payload formats, and other components. For example, "
"in the previous example, we explicitly use an OctKey instead of a simple "
"string. Additionally, since JWS in joserfc only supports encoding strings"
" and bytes, you cannot pass a dictionary directly as the payload. "
"Instead, the payload must first be converted to a JSON string using "
"json.dumps. This explicit approach ensures better type safety and clarity"
" in your code."
msgstr ""

#: ../../migrations/python-jose.rst:57
msgid ""
"In ``python-jose``, the methods used for encryption and decryption are "
"``jwe.encrypt`` and ``jwe.decrypt``. However, since ``joserfc`` supports "
"both compact and JSON serialization formats, it provides distinct "
"methods: ``jwe.encrypt_compact`` and ``jwe.decrypt_compact`` for compact "
"serialization, ensuring clear differentiation between the formats and "
"greater flexibility in handling JWE operations."
msgstr ""

#: ../../migrations/python-jose.rst:87
msgid ""
"The ``jwt`` module in ``python-jose`` supports only JWS (JSON Web "
"Signature) mode, whereas ``joserfc`` provides support for both JWS and "
"JWE (JSON Web Encryption) modes. Although both libraries utilize the "
"``encode`` and ``decode`` methods, their parameters differ significantly "
"in terms of structure and flexibility."
msgstr ""

#: ../../migrations/python-jose.rst:115
msgid "get_unverified_header"
msgstr ""

#: ../../migrations/python-jose.rst:117
msgid ""
"The ``jwt`` module in python-jose provides a method called "
"``get_unverified_header``, which allows extracting the header from a JWT "
"without verifying its signature."
msgstr ""

#: ../../migrations/python-jose.rst:120
msgid "In ``joserfc``, we can get the unverified header with:"
msgstr ""

#: ../../migrations/python-jose.rst:133
msgid "JWK"
msgstr ""

