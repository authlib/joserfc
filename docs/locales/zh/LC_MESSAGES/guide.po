# SOME DESCRIPTIVE TITLE.
# Copyright (C) Copyright &copy; 2023, Hsiaoming Yang
# This file is distributed under the same license as the joserfc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: joserfc 0.5.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-07 09:32+0900\n"
"PO-Revision-Date: 2023-07-15 14:44+0900\n"
"Last-Translator: Hsiaoming Yang <me@lepture.com>\n"
"Language: zh\n"
"Language-Team: zh <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../guide/algorithms.rst:6 ../../guide/jws.rst:252
#: ../../guide/registry.rst:21
msgid "Algorithms"
msgstr "算法"

#: ../../guide/algorithms.rst:10
msgid "All available algorithms for JWS, JWE, JWK, and JWT."
msgstr "JWS、JWE、JWK 和 JWT 所有可用的算法。"

#: ../../guide/algorithms.rst:14
msgid ""
"This documentation describes the algorithms to be used with JSON Web "
"Signature (JWS), JSON Web Encryption (JWE), and JSON Web Key (JWK)."
msgstr ""
"本文档描述了在 JSON Web Signature (JWS)、JSON Web Encryption (JWE) 和 JSON Web Key"
" (JWK) 中使用的算法。"

#: ../../guide/algorithms.rst:19 ../../guide/index.rst:63 ../../guide/jwk.rst:6
msgid "JSON Web Key"
msgstr ""

#: ../../guide/algorithms.rst:21
msgid "The JSON Web Key (JWK) algorithms contains:"
msgstr "JSON Web Key（JWK）的算法包括："

#: ../../guide/algorithms.rst:23
msgid ""
":ref:`OctKey` : accepts key size in bits, which means the ``key_size`` "
"MUST be dividable by 8."
msgstr ":ref:`OctKey` ：接受以比特为单位的密钥大小，这意味着 ``key_size`` 必须是 8 的倍数。"

#: ../../guide/algorithms.rst:24
msgid ""
":ref:`RSAKey` : accepts key size in bits, ``key_size`` MUST ``>=512`` and"
" dividable by 8."
msgstr ":ref:`RSAKey` ：接受以比特为单位的密钥大小，``key_size`` 必须 ``>=512`` 且为 8 的倍数。"

#: ../../guide/algorithms.rst:25
msgid ""
":ref:`ECKey` : accepts ``crv`` with ``P-256``, ``P-384``, ``P-521``, and "
"``secp256k1``."
msgstr ":ref:`ECKey` ：接受 ``crv`` 为 ``P-256``、``P-384``、``P-521`` 和 ``secp256k1``。"

#: ../../guide/algorithms.rst:26
msgid ""
":ref:`OKPKey` : accepts ``crv`` with ``Ed25519``, ``Ed448``, ``X25519``, "
"and ``X448``."
msgstr ":ref:`OKPKey` ：接受 ``crv`` 为 ``Ed25519``、``Ed448``、``X25519`` 和 ``X448``。"

#: ../../guide/algorithms.rst:31 ../../guide/index.rst:75 ../../guide/jws.rst:6
msgid "JSON Web Signature"
msgstr ""

#: ../../guide/algorithms.rst:33
msgid ""
"``joserfc.jws`` module supports algorithms from RFC7518, RFC8037, and "
"RFC8812. You MUST specify the correct key type for each algorithm."
msgstr "``joserfc.jws`` 模块支持 RFC7518、RFC8037 和 RFC8812 中的算法。您必须为每个算法指定正确的密钥类型。"

#: ../../guide/algorithms.rst:37 ../../guide/algorithms.rst:68
#: ../../guide/jws.rst:258
msgid "Algorithm name"
msgstr "算法名"

#: ../../guide/algorithms.rst:37 ../../guide/algorithms.rst:68
msgid "Key Type"
msgstr "密钥类型"

#: ../../guide/algorithms.rst:37 ../../guide/algorithms.rst:68
#: ../../guide/jws.rst:258
msgid "Recommended"
msgstr "是推荐"

#: ../../guide/algorithms.rst:39 ../../guide/jws.rst:260
msgid "none"
msgstr ""

#: ../../guide/algorithms.rst:39 ../../guide/algorithms.rst:40
#: ../../guide/algorithms.rst:41 ../../guide/algorithms.rst:42
#: ../../guide/algorithms.rst:70 ../../guide/algorithms.rst:71
#: ../../guide/algorithms.rst:72 ../../guide/algorithms.rst:73
#: ../../guide/algorithms.rst:81 ../../guide/algorithms.rst:82
#: ../../guide/algorithms.rst:83 ../../guide/jwk.rst:19
msgid "OctKey"
msgstr ""

#: ../../guide/algorithms.rst:39 ../../guide/algorithms.rst:41
#: ../../guide/algorithms.rst:42 ../../guide/algorithms.rst:44
#: ../../guide/algorithms.rst:45 ../../guide/algorithms.rst:47
#: ../../guide/algorithms.rst:48 ../../guide/algorithms.rst:49
#: ../../guide/algorithms.rst:50 ../../guide/algorithms.rst:51
#: ../../guide/algorithms.rst:52 ../../guide/algorithms.rst:53
#: ../../guide/algorithms.rst:72 ../../guide/algorithms.rst:74
#: ../../guide/algorithms.rst:76 ../../guide/algorithms.rst:79
#: ../../guide/algorithms.rst:81 ../../guide/algorithms.rst:82
#: ../../guide/algorithms.rst:83 ../../guide/algorithms.rst:84
#: ../../guide/algorithms.rst:85 ../../guide/algorithms.rst:86
#: ../../guide/jws.rst:260 ../../guide/jws.rst:262 ../../guide/jws.rst:263
#: ../../guide/jws.rst:265 ../../guide/jws.rst:266 ../../guide/jws.rst:268
#: ../../guide/jws.rst:269 ../../guide/jws.rst:270 ../../guide/jws.rst:271
#: ../../guide/jws.rst:272 ../../guide/jws.rst:273 ../../guide/jws.rst:274
msgid ":bdg-danger:`No`"
msgstr ":bdg-danger:`否`"

#: ../../guide/algorithms.rst:40 ../../guide/jws.rst:261
msgid "HS256"
msgstr ""

#: ../../guide/algorithms.rst:40 ../../guide/algorithms.rst:43
#: ../../guide/algorithms.rst:46 ../../guide/algorithms.rst:70
#: ../../guide/algorithms.rst:71 ../../guide/algorithms.rst:73
#: ../../guide/algorithms.rst:75 ../../guide/algorithms.rst:77
#: ../../guide/algorithms.rst:78 ../../guide/algorithms.rst:80
msgid ":bdg-success:`Yes`"
msgstr ":bdg-success:`是`"

#: ../../guide/algorithms.rst:41 ../../guide/jws.rst:262
msgid "HS384"
msgstr ""

#: ../../guide/algorithms.rst:42 ../../guide/jws.rst:263
msgid "HS512"
msgstr ""

#: ../../guide/algorithms.rst:43 ../../guide/jws.rst:264
msgid "RS256"
msgstr ""

#: ../../guide/algorithms.rst:43 ../../guide/algorithms.rst:44
#: ../../guide/algorithms.rst:45 ../../guide/algorithms.rst:49
#: ../../guide/algorithms.rst:50 ../../guide/algorithms.rst:51
#: ../../guide/algorithms.rst:74 ../../guide/algorithms.rst:75
#: ../../guide/algorithms.rst:76 ../../guide/algorithms.rst:84
#: ../../guide/algorithms.rst:85 ../../guide/algorithms.rst:86
#: ../../guide/jwk.rst:64
msgid "RSAKey"
msgstr ""

#: ../../guide/algorithms.rst:44 ../../guide/jws.rst:265
msgid "RS384"
msgstr ""

#: ../../guide/algorithms.rst:45 ../../guide/jws.rst:266
msgid "RS512"
msgstr ""

#: ../../guide/algorithms.rst:46 ../../guide/jws.rst:267
msgid "ES256"
msgstr ""

#: ../../guide/algorithms.rst:46 ../../guide/algorithms.rst:47
#: ../../guide/algorithms.rst:48 ../../guide/algorithms.rst:53
#: ../../guide/algorithms.rst:77 ../../guide/algorithms.rst:78
#: ../../guide/algorithms.rst:79 ../../guide/algorithms.rst:80
#: ../../guide/jwk.rst:125
msgid "ECKey"
msgstr ""

#: ../../guide/algorithms.rst:47 ../../guide/jws.rst:268
msgid "ES384"
msgstr ""

#: ../../guide/algorithms.rst:48 ../../guide/jws.rst:269
msgid "ES512"
msgstr ""

#: ../../guide/algorithms.rst:49 ../../guide/jws.rst:270
msgid "PS256"
msgstr ""

#: ../../guide/algorithms.rst:50 ../../guide/jws.rst:271
msgid "PS384"
msgstr ""

#: ../../guide/algorithms.rst:51 ../../guide/jws.rst:272
msgid "PS512"
msgstr ""

#: ../../guide/algorithms.rst:52 ../../guide/jws.rst:273
msgid "EdDSA"
msgstr ""

#: ../../guide/algorithms.rst:52 ../../guide/algorithms.rst:107
#: ../../guide/jwk.rst:180
msgid "OKPKey"
msgstr ""

#: ../../guide/algorithms.rst:53 ../../guide/jws.rst:274
msgid "ES256K"
msgstr ""

#: ../../guide/algorithms.rst:57
msgid ""
"``EdDSA`` algorithm only accepts ``OKPKey`` with \"crv\" of \"Ed25519\" "
"and \"Ed448\"."
msgstr "``EdDSA`` 算法只接受具有 \"crv\" 为 \"Ed25519\" 和 \"Ed448\" 的 ``OKPKey``。"

#: ../../guide/algorithms.rst:62 ../../guide/index.rst:81 ../../guide/jwe.rst:6
msgid "JSON Web Encryption"
msgstr ""

#: ../../guide/algorithms.rst:64
msgid ""
"``joserfc.jwe`` module supports algorithms from RFC7518, and drafts of "
"``ECDH-1PU``. You MUST specify the correct key type for each algorithm."
msgstr "``joserfc.jwe`` 模块支持 RFC7518 中的算法，以及 ``ECDH-1PU`` 的草案。您必须为每个算法指定正确的密钥类型。"

#: ../../guide/algorithms.rst:70
msgid "dir"
msgstr ""

#: ../../guide/algorithms.rst:71
msgid "A128KW"
msgstr ""

#: ../../guide/algorithms.rst:72
msgid "A192KW"
msgstr ""

#: ../../guide/algorithms.rst:73
msgid "A256KW"
msgstr ""

#: ../../guide/algorithms.rst:74
msgid "RSA1_5"
msgstr ""

#: ../../guide/algorithms.rst:75
msgid "RSA-OAEP"
msgstr ""

#: ../../guide/algorithms.rst:76
msgid "RSA-OAEP-256"
msgstr ""

#: ../../guide/algorithms.rst:77 ../../guide/algorithms.rst:112
msgid "ECDH-ES"
msgstr ""

#: ../../guide/algorithms.rst:78 ../../guide/algorithms.rst:113
msgid "ECDH-ES+A128KW"
msgstr ""

#: ../../guide/algorithms.rst:79 ../../guide/algorithms.rst:114
msgid "ECDH-ES+A192KW"
msgstr ""

#: ../../guide/algorithms.rst:80 ../../guide/algorithms.rst:115
msgid "ECDH-ES+A256KW"
msgstr ""

#: ../../guide/algorithms.rst:81
msgid "A128GCMKW"
msgstr ""

#: ../../guide/algorithms.rst:82
msgid "A192GCMKW"
msgstr ""

#: ../../guide/algorithms.rst:83
msgid "A256GCMKW"
msgstr ""

#: ../../guide/algorithms.rst:84
msgid "PBES2-HS256+A128KW"
msgstr ""

#: ../../guide/algorithms.rst:85
msgid "PBES2-HS384+A192KW"
msgstr ""

#: ../../guide/algorithms.rst:86
msgid "PBES2-HS512+A256KW"
msgstr ""

#: ../../guide/algorithms.rst:89
msgid ""
"All algorithms defined in RFC7518 for \"enc\" value are recommended, "
"which including:"
msgstr "RFC7518 中定义的所有用于 \"enc\" 值的算法都是推荐使用的，包括："

#: ../../guide/algorithms.rst:92
msgid "``A128CBC-HS256``"
msgstr ""

#: ../../guide/algorithms.rst:93
msgid "``A192CBC-HS384``"
msgstr ""

#: ../../guide/algorithms.rst:94
msgid "``A256CBC-HS512``"
msgstr ""

#: ../../guide/algorithms.rst:95
msgid "``A128GCM``"
msgstr ""

#: ../../guide/algorithms.rst:96
msgid "``A192GCM``"
msgstr ""

#: ../../guide/algorithms.rst:97
msgid "``A256GCM``"
msgstr ""

#: ../../guide/algorithms.rst:99
msgid ""
"A ``DEF`` algorithm for the \"zip\" (compression) header parameter is "
"also defined in RFC7518, which is recommended."
msgstr "RFC7518 还定义了用于 \"zip\"（压缩）头参数的 ``DEF`` 算法，该算法推荐使用。"

#: ../../guide/algorithms.rst:102
msgid ""
"There are also additional algorithms for \"alg\" and \"enc\" in draft "
"versions. Please refer to the following sections for more information."
msgstr "草案版本中还有针对 \"alg\" 和 \"enc\" 的额外算法。请参考以下章节获取更多信息。"

#: ../../guide/algorithms.rst:109
msgid ""
"You can use ``OKPKey`` with the \"crv\" (curve) parameter set to "
"``X25519`` or ``X448`` for the following algorithms:"
msgstr "对于以下算法，您可以使用 ``OKPKey`` 并将 \"crv\"（曲线）参数设置为 ``X25519`` 或 ``X448``："

#: ../../guide/algorithms.rst:117
msgid ""
"This allows you to utilize these elliptic curve algorithms with "
"``OKPKey`` for your cryptographic operations."
msgstr ""

#: ../../guide/algorithms.rst:123
msgid "C20P and XC20P"
msgstr "C20P 与 XC20P"

#: ../../guide/algorithms.rst:125
msgid ""
"``C20P`` and ``XC20P`` algorithms are still in drafts, they are not "
"registered by default. To use ``C20P`` and ``XC20P``, developers have to "
"install the ``PyCryptodome`` module."
msgstr ""
"``C20P`` 和 ``XC20P`` 算法仍处于草案阶段，默认状态下他们未注册到 ``JWERegistry``。要使用 ``C20P`` 和"
" ``XC20P``，开发人员必须安装 ``PyCryptodome`` 模块。"

#: ../../guide/algorithms.rst:132
msgid ""
"This is caused by ``cryptography`` package does only support \"ChaCha20\""
" cipher, not **XChaCha20**, while ``pycryptodome`` supports both "
"\"ChaCha20\" and \"XChaCha20\" ciphers."
msgstr ""
"这是由于 ``cryptography`` 库只支持 \"ChaCha20\" 密码算法，不支持 **XChaCha20**，而 "
"``pycryptodome`` 同时支持 \"ChaCha20\" 和 \"XChaCha20\" 密码算法。"

#: ../../guide/algorithms.rst:136
msgid "Register ciphers"
msgstr "注册密码算法"

#: ../../guide/algorithms.rst:138
msgid ""
"The default :ref:`registry` doesn't contain draft ciphers, developers "
"MUST register ``C20P`` and ``XC20P`` at first:"
msgstr "默认的 :ref:`registry` 不包含草案算法，开发人员必须先注册 ``C20P`` 和 ``XC20P``："

#: ../../guide/algorithms.rst:148
msgid "Use custom ``registry``"
msgstr "自定义注册表 ``registry``"

#: ../../guide/algorithms.rst:153
msgid ""
"Use a custom ``registry`` in :meth:`encrypt_compact`, "
":meth:`decrypt_compact`, :meth:`encrypt_json`, and :meth:`decrypt_json`."
msgstr ""
"在 :meth:`encrypt_compact`、:meth:`decrypt_compact`、:meth:`encrypt_json` 和 "
":meth:`decrypt_json` 中使用自定义 ``registry``。"

#: ../../guide/algorithms.rst:178
msgid "ECDH-1PU algorithms"
msgstr "ECDH-1PU 相关算法"

#: ../../guide/algorithms.rst:180
msgid ""
"Key Agreement with Elliptic Curve Diffie-Hellman One-Pass Unified Model "
"(ECDH-1PU) are still in drafts, they are not registered by default. To "
"use ``ECDH-1PU`` related algorithms, developers MUST register them "
"manually:"
msgstr ""
"椭圆曲线迪菲-赫尔曼一次通用模型（ECDH-1PU）密钥协商仍然处于草案阶段，默认情况下未注册。要使用与 ``ECDH-1PU`` "
"相关的算法，开发人员必须手动注册它们："

#: ../../guide/algorithms.rst:190
msgid ""
"Then use a custom ``registry`` with the required ``ECDH-1PU`` algorithms."
" For instance:"
msgstr "然后使用带有所需的 ``ECDH-1PU`` 算法的自定义 ``registry``。例如："

#: ../../guide/algorithms.rst:213
msgid ""
"The ``ECDH-1PU`` algorithms require a **sender key**, which MUST be a "
"private key when calling :meth:`encrypt_compact` and :meth:`encrypt_json`"
" methods."
msgstr ""
"``ECDH-1PU`` 算法需要一个 **发送方密钥**，在调用 :meth:`encrypt_compact` 和 "
":meth:`encrypt_json` 方法时，该密钥必须是私钥。"

#: ../../guide/algorithms.rst:216
msgid ""
"The ``sender_key`` can be a :class:`~joserfc.jwk.KeySet`, and JWE will "
"find the correct key according to ``skid`` header value."
msgstr ""
"``sender_key`` 可以是 :class:`~joserfc.jwk.KeySet`，JWE 会根据 ``skid`` "
"头部值查找正确的密钥。"

#: ../../guide/index.rst:4
msgid "Guide"
msgstr "教程"

#: ../../guide/index.rst:6
msgid ""
"This section provides a quick overview of how to get started with "
"``joserfc`` and perform encoding and decoding a JWT."
msgstr "本章节提供了关于如何开始使用 ``joserfc`` 并进行 JWT 编码和解码的快速概述。"

#: ../../guide/index.rst:10
msgid "Encode and decode JWT"
msgstr "JWT 的编码与解码"

#: ../../guide/index.rst:24
msgid "Learn the details of :ref:`jwt` in the next chapter."
msgstr "您可以在下一章节中了解 :ref:`jwt` 的详细信息。"

#: ../../guide/index.rst:27
msgid "Import and generate JWK"
msgstr "JWK 的导入与导出"

#: ../../guide/index.rst:54
msgid "Learn the details of :ref:`jwk` in the next chapter."
msgstr "您可以在下一章节中了解 :ref:`jwk` 的详细信息。"

#: ../../guide/index.rst:57
msgid "Dive deep"
msgstr "深入了解"

#: ../../guide/index.rst:59
msgid "Next, learn each module in details."
msgstr "接下来，详细学习下面的每个模块。"

#: ../../guide/index.rst:67
msgid ""
"Learn how to use ``OctKey``, ``RSAKey``, ``ECKey``, ``OKPKey``, and JSON "
"Web Key Set."
msgstr "学习如何使用 ``OctKey``、``RSAKey``、``ECKey``、``OKPKey`` 以及 JSON Web Key Set。"

#: ../../guide/index.rst:69 ../../guide/jwt.rst:6
msgid "JSON Web Token"
msgstr ""

#: ../../guide/index.rst:73
msgid "JSON Web Token (JWT) is built on top of :ref:`jws` or :ref:`jwe`."
msgstr "JSON Web Token (JWT) 本质上是一种 :ref:`jws` 或者 :ref:`jwe`。"

#: ../../guide/index.rst:79
msgid "Most :ref:`jwt` are encoded with JWS in compact serialization."
msgstr "通常我们见到的 :ref:`jwt` 都是基于 JWS 的紧凑序列化编码。"

#: ../../guide/index.rst:85
#, fuzzy
msgid ""
"JSON Web Encryption (JWE) represents encrypted content using JSON-based "
"data structures."
msgstr "JSON Web Encryption (JWE) 使用基于 JSON 的数据结构表示加密内容。（参考 RFC7516_）"

#: ../../guide/introduction.rst:4
msgid "Introduction"
msgstr "介绍"

#: ../../guide/introduction.rst:6
msgid ""
"``joserfc`` is a Python library that provides a comprehensive "
"implementation of several essential JSON Object Signing and Encryption "
"(JOSE) standards."
msgstr ""
"``joserfc`` 是一个 Python 库，提供了对多个重要的 JSON Object Signing and Encryption "
"(JOSE) 标准的全面实现。"

#: ../../guide/introduction.rst:9
msgid ""
"Derived from Authlib_, ``joserfc`` offers a redesigned API specifically "
"tailored to JOSE functionality, making it easier for developers to work "
"with JWS, JWE, JWK, JWA, and JWT in their Python applications."
msgstr ""
"``joserfc`` 源自 Authlib_，专门为 JOSE 功能量身定制。同时我们重新设计了 API，让开发人员更容易在其 Python "
"应用程序中处理 JWS、JWE、JWK、JWA 和 JWT。"

#: ../../guide/introduction.rst:16
msgid "Features"
msgstr "特点"

#: ../../guide/introduction.rst:18
msgid ""
"**Python Type Hints**: ``joserfc`` takes advantage of Python's type "
"hinting capabilities, providing a more expressive and readable codebase. "
"The use of type hints enhances development workflows by enabling better "
"static analysis, improved IDE support, and more reliable code "
"refactoring."
msgstr ""
"**Python 类型提示**：``joserfc`` 充分利用了 Python "
"的类型提示功能，提供了更具表达力和可读性的代码库。使用类型提示可以增强开发工作流程，实现更好的静态分析、改善 IDE 支持和更可靠的代码重构。"

#: ../../guide/introduction.rst:23
msgid ""
"**Organized Codebase with RFC Compliance**: ``joserfc`` is structured "
"following the RFC standards, ensuring clear separation and organization "
"of the different JOSE functionalities. It strictly follows the latest "
"versions of the JOSE standards, guaranteeing the highest level of "
"interoperability and compliance."
msgstr ""
"**代码库组织有序且符合 RFC 标准**：``joserfc`` 的结构遵循 RFC 标准，确保不同的 JOSE "
"功能之间的清晰分离和组织。它严格遵循最新的 JOSE 标准版本，确保最高水平的互操作性和合规性。"

#: ../../guide/introduction.rst:29
msgid "Why joserfc?"
msgstr "为何创建 joserfc"

#: ../../guide/introduction.rst:31
msgid ""
"``joserfc`` is derived from Authlib to facilitate easy maintenance and "
"modularity. Previously, Authlib was developed as a mono library to design"
" a comprehensive API that covered a wide range of authentication and "
"security needs. However, as the project evolved, it became evident that "
"splitting the modules from Authlib would improve maintainability and "
"provide more focused and specialized libraries."
msgstr ""
"``joserfc`` 分离自 Authlib，以便于简化维护和模块化。之前，Authlib "
"是作为一个单体库开发的，旨在设计一个涵盖广泛身份验证和安全需求的全面 API。然而，随着项目的发展，我们发现是时候将模块从 Authlib "
"中拆分出来了，这将有助于提高项目的可维护性，并提供更专注和专业化的 JOSE 库。"

#: ../../guide/introduction.rst:37
msgid ""
"With ``joserfc``, developers can now benefit from a standalone library "
"dedicated specifically to JOSE standards. This focused approach allows "
"for better code organization, improved documentation, and a more "
"streamlined development experience. By utilizing ``joserfc``, developers "
"can confidently integrate JOSE functionalities into their projects, "
"knowing that they are working with a dedicated and well-maintained "
"solution."
msgstr ""

#: ../../guide/jwe.rst:11
msgid ""
"JSON Web Encryption (JWE) represents encrypted content using JSON-based "
"data structures. (via RFC7516_)"
msgstr "JSON Web Encryption (JWE) 使用基于 JSON 的数据结构表示加密内容。（参考 RFC7516_）"

#: ../../guide/jwe.rst:17
msgid "Compact Encryption"
msgstr "紧凑型加密"

#: ../../guide/jwe.rst:19
msgid ""
"The JWE Compact Serialization represents encrypted content as a compact, "
"URL-safe string.  This string is:"
msgstr "JWE 紧凑型（Compact）序列化将加密内容表示为紧凑的、URL 安全的字符串。该字符串为："

#: ../../guide/jwe.rst:30 ../../guide/jws.rst:29
msgid ""
"An example of a compact serialization (line breaks for display purposes "
"only):"
msgstr "以下是一个紧凑型序列化的例子（换行符仅用于显示目的）："

#: ../../guide/jwe.rst:47 ../../guide/jwe.rst:112
msgid "Encryption"
msgstr "加密"

#: ../../guide/jwe.rst:49
msgid ""
"You can call :meth:`jwe.encrypt_compact` to construct a compact JWE "
"serialization:"
msgstr "你可以调用 :meth:`jwe.encrypt_compact` 来构建一个紧凑型序列化："

#: ../../guide/jwe.rst:60
msgid ""
"A compact JWE is constructed by ``protected`` header, ``plaintext`` and a"
" public key. In the above example, ``protected`` is the \"protected "
"header\" part, `\"hello\"` is the plaintext part, and ``key`` is the "
"public key part (oct key is a symmetric key, it is a shared key, there is"
" no public or private differences)."
msgstr ""

#: ../../guide/jwe.rst:65
msgid ""
"It is suggested that you learn the :ref:`jwk` section, and find the "
"correct key type according to :ref:`JSON Web Encryption Algorithms "
"<jwe_algorithms>`."
msgstr ""

#: ../../guide/jwe.rst:69 ../../guide/jwe.rst:158
msgid "Decryption"
msgstr "解密"

#: ../../guide/jwe.rst:71
msgid ""
"It is very easy to decrypt the compact serialization in the previous "
"example with :meth:`jwe.decrypt_compact`:"
msgstr ""

#: ../../guide/jwe.rst:82
msgid ""
"If the algorithm is accepting an asymmetric key, you MUST use a private "
"key in ``decrypt_compact`` method."
msgstr ""

#: ../../guide/jwe.rst:86
msgid "JSON Encryption"
msgstr ""

#: ../../guide/jwe.rst:88
msgid ""
"The JWE JSON Serialization represents encrypted content as a JSON object."
"  This representation is neither optimized for compactness nor URL safe."
msgstr ""

#: ../../guide/jwe.rst:92
msgid ""
"An example of a JWE using the general JWE JSON Serialization is as "
"follows:"
msgstr ""

#: ../../guide/jwe.rst:116
msgid ""
"``jwe.JSONEncryption`` is seperated to ``GeneralJSONEncryption`` and "
"``FlattenedJSONEncryption``."
msgstr ""

#: ../../guide/jwe.rst:118
msgid ""
"The structure for JSON JWE serialization is a little complex, developers "
"SHOULD create an object of :class:`jwe.GeneralJSONEncryption` at first:"
msgstr ""

#: ../../guide/jwe.rst:140
msgid "If you prefer adding recipient keys from existing key set:"
msgstr ""

#: ../../guide/jwe.rst:160
msgid ""
"Calling :meth:`jwe.decrypt_json` could decrypt the JSON Serialization in "
"the above example. Most of the time, you would need a JWK Set of private "
"keys for decryption."
msgstr ""

#: ../../guide/jwe.rst:178 ../../guide/jws.rst:189
msgid "General and Flattened"
msgstr ""

#: ../../guide/jwe.rst:180
msgid ""
"The above example is a General JWE JSON Serialization, there is also a "
"Flattened JWE JSON Serialization. The Flattened one MUST ONLY contain one"
" recipient."
msgstr ""

#: ../../guide/jwe.rst:183
msgid ""
"The syntax of a JWE using the flattened JWE JSON Serialization is as "
"follows:"
msgstr ""

#: ../../guide/jwe.rst:198
msgid ""
"It is flattened, it moves all the members out of the ``recipients`` "
"field. To ``encrypt_json`` into a flattened serialization, you can "
"construct a :class`jwe.FlattenedJSONEncryption` instead:"
msgstr ""

#: ../../guide/jwe.rst:206
msgid "And make sure only adding one recipient."
msgstr "同时注意，你只能增加一位成员。"

#: ../../guide/jwe.rst:209 ../../guide/jwt.rst:288
msgid "Algorithms & Registry"
msgstr "算法和注册表"

#: ../../guide/jwe.rst:211
msgid ""
"``joserfc.jwe`` module would ONLY allow recommended algorithms by "
"default, you can find which algorithm is recommended according to "
":ref:`JSON Web Encryption Algorithms <jwe_algorithms>`."
msgstr ""

#: ../../guide/jwe.rst:215
msgid ""
"It is possible to support non-recommended algorithms by passing the "
"``algorithms`` parameter, or with a custom ``registry``."
msgstr ""

#: ../../guide/jwe.rst:225
msgid ""
"The registry is a little complex, find out more on the :ref:`registry` "
"section."
msgstr ""

#: ../../guide/jwk.rst:11
msgid ""
"A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data "
"structure that represents a cryptographic key (via RFC7517_)."
msgstr ""

#: ../../guide/jwk.rst:21
msgid ""
"An :class:`OctKey` is a symmetric key defined in `RFC7518 section 6.4 "
"<https://www.rfc-editor.org/rfc/rfc7518#section-6.4>`_."
msgstr ""

#: ../../guide/jwk.rst:25
msgid "Create an \"oct\" key"
msgstr "生成一个 OctKey"

#: ../../guide/jwk.rst:27
msgid ""
"You can generate an ``OctKey`` with the :meth:`OctKey.generate_key` "
"method:"
msgstr "你可以调用 :meth:`OctKey.generate_key` 来生成一个 ``OctKey``："

#: ../../guide/jwk.rst:37
msgid "Import an \"oct\" key"
msgstr "导入一个 OctKey"

#: ../../guide/jwk.rst:39
msgid "You can import an ``OctKey`` from string, bytes and a JWK (in dict)."
msgstr "您可以从字符串、字节和 JWK（dict）导入一个 ``OctKey``。"

#: ../../guide/jwk.rst:52
msgid "When importing a key, you can add extra parameters into a key:"
msgstr ""

#: ../../guide/jwk.rst:66
msgid ""
"An :class:`RSAKey` is an asymmetric key defined in `RFC7518 section 6.3 "
"<https://www.rfc-editor.org/rfc/rfc7518#section-6.3>`_. It represents RSA"
" keys."
msgstr ""

#: ../../guide/jwk.rst:71
msgid "Generate an \"RSA\" key"
msgstr "生成一个 RSAKey"

#: ../../guide/jwk.rst:73
msgid "You can generate an \"EC\" key with a given key size (in bit):"
msgstr ""

#: ../../guide/jwk.rst:83
msgid "Import an \"RSA\" key"
msgstr "导入一个 RSAKey"

#: ../../guide/jwk.rst:85
msgid "You can import an ``RSAKey`` from string, bytes and a JWK (in dict)."
msgstr "您可以从字符串、字节和 JWK（dict）导入一个 ``RSAKey``。"

#: ../../guide/jwk.rst:127
msgid ""
"An :class:`ECKey` is an asymmetric key defined in `RFC7518 section 6.2 "
"<https://www.rfc-editor.org/rfc/rfc7518#section-6.2>`_. It represents "
"Elliptic Curve [DSS] keys."
msgstr ""

#: ../../guide/jwk.rst:132
msgid "Generate an \"EC\" key"
msgstr "生成一个 ECKey"

#: ../../guide/jwk.rst:134
msgid "You can generate an \"EC\" key with the given curve:"
msgstr ""

#: ../../guide/jwk.rst:142
msgid "The \"crv\" values that :class:`ECKey` supports:"
msgstr ""

#: ../../guide/jwk.rst:144
msgid "``P-256`` via RFC7518"
msgstr "RFC7518 的 ``P-256``"

#: ../../guide/jwk.rst:145
msgid "``P-384`` via RFC7518"
msgstr "RFC7518 的 ``P-384``"

#: ../../guide/jwk.rst:146
msgid "``P-521`` via RFC7518"
msgstr "RFC7518 的 ``P-521``"

#: ../../guide/jwk.rst:147
msgid "``secp256k1`` via RFC8812"
msgstr "RFC8812 的 ``secp256k1``"

#: ../../guide/jwk.rst:149
msgid "It is ``P-521``, not ``P-512``, it is not a typo."
msgstr "这里确实是``P-521``，而不是``P-512``，我们没有写错。"

#: ../../guide/jwk.rst:152
msgid "Import an \"EC\" key"
msgstr "导入一个 ECKey"

#: ../../guide/jwk.rst:154
msgid "You can import an ``ECKey`` from string, bytes and a JWK (in dict)."
msgstr "您可以从字符串、字节和 JWK（dict）导入一个 ``ECKey``。"

#: ../../guide/jwk.rst:182
msgid "An :class:`OKPKey` is an asymmetric key defined in RFC8037_."
msgstr ":class:`OKPKey` 是 RFC8037_ 中定义的一种非对称密钥。"

#: ../../guide/jwk.rst:187
msgid "Generate an \"OKP\" key"
msgstr "生成一个 OKPKey"

#: ../../guide/jwk.rst:189
msgid "You can generate an \"OKP\" key with the given curve:"
msgstr ""

#: ../../guide/jwk.rst:197
msgid ""
":class:`OKPKey` accepts \"crv\" values of ``Ed25519``, ``Ed448``, "
"``X25519``, and ``X448``."
msgstr ""

#: ../../guide/jwk.rst:201
msgid "Import an \"OKP\" key"
msgstr "导入一个 OKPKey"

#: ../../guide/jwk.rst:203
msgid "You can import an ``OKPKey`` from string, bytes and a JWK (in dict)."
msgstr "您可以从字符串、字节和 JWK（dict）导入一个 ``OKPKey``。"

#: ../../guide/jwk.rst:226
msgid "Key Set"
msgstr ""

#: ../../guide/jwk.rst:228
msgid ""
"A JWK Set is a JSON object that represents a set of JWKs. An example of a"
" JWK Set:"
msgstr ""

#: ../../guide/jwk.rst:252
msgid "Create a key set"
msgstr "生成一个 KeySet"

#: ../../guide/jwk.rst:254
msgid "You can create a key set with a given set of keys:"
msgstr ""

#: ../../guide/jwk.rst:262
msgid "Or, you can generate a key set for a certain \"kty\":"
msgstr ""

#: ../../guide/jwk.rst:269
msgid "Import a key set"
msgstr "导入一个 KeySet"

#: ../../guide/jwk.rst:271
msgid "An example about importing JWKS from a local file:"
msgstr "以下是一个从本地文件导入 JWKS 的例子："

#: ../../guide/jwk.rst:281
msgid "An example about importing JWKS from a URL:"
msgstr ""

#: ../../guide/jwk.rst:291
msgid "Key methods"
msgstr ""

#: ../../guide/jwk.rst:296
msgid "``thumbprint``"
msgstr ""

#: ../../guide/jwk.rst:298
msgid ""
"Call this method will generate the thumbprint with algorithm defined in "
"RFC7638."
msgstr ""

#: ../../guide/jwk.rst:310
msgid "``ensure_kid``"
msgstr ""

#: ../../guide/jwk.rst:312
msgid ""
"Call this method to make sure the key contains a ``kid``. If the key has "
"no ``kid``, generate one with the above ``.thumbprint`` method."
msgstr ""

#: ../../guide/jwk.rst:326
msgid "``as_dict``"
msgstr ""

#: ../../guide/jwk.rst:328
msgid ""
"Dump a key or key set into dict format, which can be used to convert to "
"JSON:"
msgstr ""

#: ../../guide/jwk.rst:338
msgid "``as_pem``"
msgstr ""

#: ../../guide/jwk.rst:340
msgid "Dump an asymmetric key into PEM format (in bytes):"
msgstr "将非对称密钥转换为 PEM 格式（数据为字节形式）："

#: ../../guide/jwk.rst:351
msgid "``as_der``"
msgstr ""

#: ../../guide/jwk.rst:353
msgid "Dump an asymmetric key into DER format (in bytes):"
msgstr ""

#: ../../guide/jwk.rst:364
msgid "``JWKRegistry``"
msgstr ""

#: ../../guide/jwk.rst:366
msgid ""
"The :class:`JWKRegistry` class serves as a registry for storing all the "
"supported key types in the ``joserfc`` library. While developers "
"typically use specific key types such as ``RSAKey`` or ``ECKey``, this "
"registry offers a means to dynamically import and generate keys."
msgstr ""

#: ../../guide/jwk.rst:372
msgid "Import keys"
msgstr ""

#: ../../guide/jwk.rst:374
msgid ""
"The :meth:`JWKRegistry.import_key` can choose the correct key type "
"automatically when importing a JWK in dict:"
msgstr ""

#: ../../guide/jwk.rst:391
msgid ""
"If the key is in bytes or string, not dict, developers SHOULD specify the"
" key type manually:"
msgstr ""

#: ../../guide/jwk.rst:400
msgid "Generate keys"
msgstr ""

#: ../../guide/jwk.rst:402
msgid ""
"The :meth:`JWKRegistry.generate_key` can generate a key with all the "
"supported key types. For ``oct`` and ``RSA`` the parameters in this "
"method:"
msgstr ""

#: ../../guide/jwk.rst:412
msgid "For ``EC`` and ``OKP`` keys, the parameters are:"
msgstr ""

#: ../../guide/jwk.rst:421
msgid "Options"
msgstr ""

#: ../../guide/jwk.rst:423
msgid ""
"The ``import_key`` and ``generate_key`` methods available in ``OctKey``, "
"``RSAKey``, ``ECKey``, ``OKPKey``, and ``JWKRegistry`` classes have an "
"optional ``parameters`` parameter. This ``parameters`` allows you to "
"provide a dict that includes additional key parameters to be included in "
"the JWK."
msgstr ""

#: ../../guide/jwk.rst:428
msgid "Some of the standard (registered) header fields are:"
msgstr ""

#: ../../guide/jwk.rst:430
msgid "``kty``: Key Type, it is automatically added"
msgstr ""

#: ../../guide/jwk.rst:431
msgid "``use``: Public Key Use, \"sig\" or \"enc\""
msgstr ""

#: ../../guide/jwk.rst:432
msgid "``key_ops``: Key Operations, allowed operations of this key"
msgstr ""

#: ../../guide/jwk.rst:433
msgid "``alg``: Algorithm, allowed algorithm of this key"
msgstr ""

#: ../../guide/jwk.rst:434
msgid "``kid``: Key ID, a string of the key ID"
msgstr ""

#: ../../guide/jwk.rst:436
msgid ""
"When using ``import_key`` and ``generate_key``, developers can pass the "
"extra key ``parameters``:"
msgstr ""

#: ../../guide/jwk.rst:443
msgid ""
"The above ``RSAKey`` then can only be used for ``JWS`` with ``alg`` of "
"``RS256``, and it can only be used for deserialization (``verify``)."
msgstr ""

#: ../../guide/jws.rst:11
msgid ""
"JSON Web Signature (JWS) represents content secured with digital "
"signatures or Message Authentication Codes (MACs) using JSON-based data "
"structures. (via RFC7515_)"
msgstr ""

#: ../../guide/jws.rst:18
msgid "Compact Signature"
msgstr ""

#: ../../guide/jws.rst:20
msgid ""
"The JWS Compact Serialization represents digitally signed or MACed "
"content as a compact, URL-safe string. This string is:"
msgstr ""

#: ../../guide/jws.rst:39 ../../guide/jws.rst:115
msgid "Serialization"
msgstr ""

#: ../../guide/jws.rst:41
msgid ""
"You can call :meth:`jws.serialize_compact` to construct a compact JWS "
"serialization:"
msgstr ""

#: ../../guide/jws.rst:51
msgid ""
"A compact JWS is constructed by protected header, payload and a private "
"key. In the above example, ``protected`` is the \"protected header\" "
"part, `\"hello\"` is the payload part, and `\"secret\"` is a plain "
"private key."
msgstr ""

#: ../../guide/jws.rst:55
msgid ""
"We encourage developers to use a specified key type, the above "
"`\"secret\"` is actually a :class:`jwk.OctKey`. A better example could "
"be:"
msgstr ""

#: ../../guide/jws.rst:68
msgid "You can learn more about :ref:`jwk` in previous section."
msgstr ""

#: ../../guide/jws.rst:71 ../../guide/jws.rst:172
msgid "Deserialization"
msgstr ""

#: ../../guide/jws.rst:73
msgid ""
"Calling :meth:`jws.deserialize_compact` to extract and verify the compact"
" serialization with a public key."
msgstr ""

#: ../../guide/jws.rst:88
msgid "JSON Signature"
msgstr ""

#: ../../guide/jws.rst:90
msgid ""
"The JWS JSON Serialization represents digitally signed or MACed content "
"as a JSON object.  This representation is neither optimized for "
"compactness nor URL-safe."
msgstr ""

#: ../../guide/jws.rst:94
msgid "An example of a JSON serialization:"
msgstr ""

#: ../../guide/jws.rst:117
msgid ""
"You can call :meth:`jws.serialize_json` to construct a JSON JWS "
"serialization:"
msgstr ""

#: ../../guide/jws.rst:146
msgid ""
"The JSON JWS serialization is constructed by members, payload and private"
" key. A **member** is a combination of protected header and public "
"header:"
msgstr ""

#: ../../guide/jws.rst:156
msgid ""
"The ``protected`` header will be base64 encoded in the JSON "
"serialization, together with the payload to sign a signature for the "
"member:"
msgstr ""

#: ../../guide/jws.rst:168
msgid ""
"In the above example, we passed a :class:`jwk.KeySet` as the private key "
"parameter, the :meth:`jws.serialize_json` will find the correct key in "
"the key set by ``kid``."
msgstr ""

#: ../../guide/jws.rst:174
msgid ""
"Calling :meth:`jws.deserialize_json` to extract and verify the JSON "
"serialization with a public key."
msgstr ""

#: ../../guide/jws.rst:191
msgid ""
"There are two types of JSON JWS serializations, \"general\" and "
"\"flattened\". The above example is a General JSON Serialization. A "
"Flattened JSON Serialization contains only one member. Compair the bellow"
" examples:"
msgstr ""

#: ../../guide/jws.rst:195
msgid "Flattened JSON Serialization"
msgstr ""

#: ../../guide/jws.rst:205
msgid "General JSON Serialization"
msgstr ""

#: ../../guide/jws.rst:219
msgid ""
"You can pass a member dict to construct a flattened serialization; and a "
"list of members to construct a general serialization:"
msgstr ""

#: ../../guide/jws.rst:235
msgid ""
"The returned value from ``deserialize_json`` is an object of "
":class:`jws.GeneralJSONSignature` or :class:`jws.FlattenedJSONSignature`,"
" you can tell if the signature is flattened or general with "
"``obj.flattened``:"
msgstr ""

#: ../../guide/jws.rst:241
msgid ""
"``jws.JSONSignature`` is seperated to ``GeneralJSONSignature`` and "
"``FlattenedJSONSignature``."
msgstr ""

#: ../../guide/jws.rst:254
msgid ""
"``joserfc.jws`` module supports algorithms from RFC7518, RFC8037, and "
"RFC8812. Here lists all the algorithms ``joserfc.jws`` supporting:"
msgstr ""

#: ../../guide/jws.rst:258
msgid "Description"
msgstr ""

#: ../../guide/jws.rst:260
msgid "No digital signature or MAC performed"
msgstr ""

#: ../../guide/jws.rst:261
msgid "HMAC using SHA-256"
msgstr ""

#: ../../guide/jws.rst:261 ../../guide/jws.rst:264 ../../guide/jws.rst:267
msgid ":bdg-success:`YES`"
msgstr ""

#: ../../guide/jws.rst:262
msgid "HMAC using SHA-384"
msgstr ""

#: ../../guide/jws.rst:263
msgid "HMAC using SHA-512"
msgstr ""

#: ../../guide/jws.rst:264
msgid "RSASSA-PKCS1-v1_5 using SHA-256"
msgstr ""

#: ../../guide/jws.rst:265
msgid "RSASSA-PKCS1-v1_5 using SHA-384"
msgstr ""

#: ../../guide/jws.rst:266
msgid "RSASSA-PKCS1-v1_5 using SHA-512"
msgstr ""

#: ../../guide/jws.rst:267
msgid "ECDSA using P-256 and SHA-256"
msgstr ""

#: ../../guide/jws.rst:268
msgid "ECDSA using P-384 and SHA-384"
msgstr ""

#: ../../guide/jws.rst:269
msgid "ECDSA using P-521 and SHA-512"
msgstr ""

#: ../../guide/jws.rst:270
msgid "RSASSA-PSS using SHA-256 and MGF1 with SHA-256"
msgstr ""

#: ../../guide/jws.rst:271
msgid "RSASSA-PSS using SHA-384 and MGF1 with SHA-384"
msgstr ""

#: ../../guide/jws.rst:272
msgid "RSASSA-PSS using SHA-512 and MGF1 with SHA-512"
msgstr ""

#: ../../guide/jws.rst:273
msgid "Edwards-curve Digital Signature"
msgstr ""

#: ../../guide/jws.rst:274
msgid "ECDSA using secp256k1 curve and SHA-256"
msgstr ""

#: ../../guide/jws.rst:278
msgid "Algorithm not allowed"
msgstr ""

#: ../../guide/jws.rst:280
msgid ""
"The serialization and deserialization methods on ``joserfc.jws`` module "
"accept an ``algorithms`` parameter for specifying the allowed algorithms."
" By default, those ``serialize`` and ``deserialize`` methods will ONLY "
"allow recommended algorithms defined by RFCs. With non recommended "
"algorithms, you may encounter the below error."
msgstr ""

#: ../../guide/jws.rst:298
msgid ""
"``joserfc`` does support ``HS384``, but this algorithm is not recommended"
" by specifications, developers MUST explict specify the supported "
"algorithms either by the ``algorithms`` parameter, or ``registry`` "
"parameter."
msgstr ""

#: ../../guide/jws.rst:308
msgid ""
"Developers can also apply the ``registry`` parameter to resolve this "
"issue. Here is an example of using :ref:`registry`."
msgstr ""

#: ../../guide/jws.rst:321
msgid "Unencoded Payload Option"
msgstr ""

#: ../../guide/jws.rst:323
msgid ""
"The unencoded payload option, defined in RFC7797, allows the payload of a"
" JWS (JSON Web Signature) to remain unencoded, without using base64 "
"encoding."
msgstr ""

#: ../../guide/jws.rst:326
msgid ""
"To enable this option, you need to set the ``b64`` header parameter to "
"``false`` in the JWS header."
msgstr ""

#: ../../guide/jws.rst:329
msgid ""
"To utilize the unencoded payload option in joserfc, you must import the "
"serialize and deserialize methods from ``joserfc.rfc7797``."
msgstr ""

#: ../../guide/jws.rst:332
msgid "Here are examples demonstrating the usage of the ``b64`` option:"
msgstr ""

#: ../../guide/jws.rst:345
msgid ""
"The ``crit`` MUST be present with ``\"b64\"`` in its value set when "
"``b64`` is in the header."
msgstr ""

#: ../../guide/jws.rst:348
msgid ""
"Since the payload is not base64 encoded, if the payload contains non "
"urlsafe characters, the compact serialization will detach the payload:"
msgstr ""

#: ../../guide/jws.rst:362
msgid ""
"There are also methods for JSON serialization: ``serialize_json`` and "
"``deserialize_json``."
msgstr ""

#: ../../guide/jwt.rst:11
msgid ""
"JSON Web Token (JWT) is built on top of :ref:`jws` or :ref:`jwe` and "
"includes specific payload claims. These claims are required to be in JSON"
" format and follow a predefined set of fields."
msgstr ""

#: ../../guide/jwt.rst:17
msgid ""
"Do you know that JSON Web Token (JWT) is not a part of JOSE. Instead, it "
"was created by the OAuth working group."
msgstr ""

#: ../../guide/jwt.rst:21
msgid "Encode token"
msgstr ""

#: ../../guide/jwt.rst:23
msgid ""
":meth:`encode` is the method for creating a JSON Web Token string. It "
"encodes the payload with the given ``alg`` in header:"
msgstr ""

#: ../../guide/jwt.rst:36
msgid "The returned value of ``text`` in above example is:"
msgstr ""

#: ../../guide/jwt.rst:44
msgid "Line breaks for display only."
msgstr ""

#: ../../guide/jwt.rst:47
msgid "Decode token"
msgstr ""

#: ../../guide/jwt.rst:49
msgid ""
":meth:`decode` is the method to translate a JSON Web Token string into a "
"token object which contains ``.header`` and ``.claims`` properties:"
msgstr ""

#: ../../guide/jwt.rst:62
msgid "Validate claims"
msgstr ""

#: ../../guide/jwt.rst:64
msgid ""
"The ``jwt.decode`` method will only verify if the payload is a JSON "
"base64 string."
msgstr ""

#: ../../guide/jwt.rst:67
msgid ""
"You can define claims requests :class:`JWTClaimsRegistry` for validating "
"the decoded claims. The ``JWTClaimsRegistry`` accepts each claim as an "
"`Individual Claims Requests <ClaimsOption>`_ JSON object."
msgstr ""

#: ../../guide/jwt.rst:84
msgid "The Individual Claims Requests JSON object contains:"
msgstr ""

#: ../../guide/jwt.rst:88
msgid "``essential``"
msgstr ""

#: ../../guide/jwt.rst:87
msgid ""
"OPTIONAL. Indicates whether the Claim being requested is an Essential "
"Claim. If the value is true, this indicates that the Claim is an "
"Essential Claim."
msgstr ""

#: ../../guide/jwt.rst:91
msgid "``value``"
msgstr ""

#: ../../guide/jwt.rst:91
msgid "OPTIONAL. Requests that the Claim be returned with a particular value."
msgstr ""

#: ../../guide/jwt.rst:95
msgid "``values``"
msgstr ""

#: ../../guide/jwt.rst:94
msgid ""
"OPTIONAL. Requests that the Claim be returned with one of a set of "
"values, with the values appearing in order of preference."
msgstr ""

#: ../../guide/jwt.rst:97
msgid "And we added one more field:"
msgstr ""

#: ../../guide/jwt.rst:100
msgid "``allow_blank``"
msgstr ""

#: ../../guide/jwt.rst:100
msgid "OPTIONAL. Allow essential claims to be an empty string."
msgstr ""

#: ../../guide/jwt.rst:103
msgid "Missing essential claims"
msgstr ""

#: ../../guide/jwt.rst:118
msgid "Allow empty essential claims"
msgstr ""

#: ../../guide/jwt.rst:129
msgid "Invalid claims values"
msgstr ""

#: ../../guide/jwt.rst:139
msgid "Default validators"
msgstr ""

#: ../../guide/jwt.rst:141
msgid ""
"The ``JWTClaimsRegistry`` has built-in validators for timing related "
"fields:"
msgstr ""

#: ../../guide/jwt.rst:143
msgid "``exp``: expiration time"
msgstr ""

#: ../../guide/jwt.rst:144
msgid "``nbf``: not before"
msgstr ""

#: ../../guide/jwt.rst:145
msgid "``iat``: issued at"
msgstr ""

#: ../../guide/jwt.rst:148
msgid "JWS & JWE"
msgstr ""

#: ../../guide/jwt.rst:150
msgid ""
"JWT is built on top of JWS and JWE, all of the above examples are in JWS."
" Here is an example of JWE:"
msgstr ""

#: ../../guide/jwt.rst:163
msgid ""
"The JWE formatted result contains 5 parts, while JWS only contains 3 "
"parts, a JWE example would be something like this (line breaks for "
"display only):"
msgstr ""

#: ../../guide/jwt.rst:174
msgid "Another difference is the key used for ``encode`` and ``decode``."
msgstr ""

#: ../../guide/jwt.rst:176
msgid ""
"For :ref:`jws`, a private key is used for ``encode``, and a public key is"
" used for ``decode``. The ``encode`` method will use a private key to "
"sign, and the ``decode`` method will use a public key to verify."
msgstr ""

#: ../../guide/jwt.rst:180
msgid ""
"For :ref:`jwe`, it is the contrary, a public key is used for ``encode``, "
"and a private key is used for ``decode``. The ``encode`` method  will use"
" a public key to encrypt, and the ``decode`` method will use a private "
"key to decrypt."
msgstr ""

#: ../../guide/jwt.rst:185
msgid "The key parameter"
msgstr ""

#: ../../guide/jwt.rst:187
msgid ""
"In the above example, we're using :ref:`OctKey` only for simplicity. "
"There are other types of keys in :ref:`jwk`."
msgstr ""

#: ../../guide/jwt.rst:191
msgid "Key types"
msgstr ""

#: ../../guide/jwt.rst:193
msgid ""
"Each algorithm (``alg`` in header) requires a certain type of key. For "
"example:"
msgstr ""

#: ../../guide/jwt.rst:195
msgid "``HS256`` requires ``OctKey``"
msgstr ""

#: ../../guide/jwt.rst:196
msgid "``RS256`` requires ``RSAKey``"
msgstr ""

#: ../../guide/jwt.rst:197
msgid "``ES256`` requires ``ECKey`` or ``OKPKey``"
msgstr ""

#: ../../guide/jwt.rst:199
msgid "You can find the correct key type for each algorithm at:"
msgstr ""

#: ../../guide/jwt.rst:201 ../../guide/jwt.rst:296
msgid ":ref:`JSON Web Signature Algorithms <jws_algorithms>`"
msgstr ""

#: ../../guide/jwt.rst:202 ../../guide/jwt.rst:297
msgid ":ref:`JSON Web Encryption Algorithms <jwe_algorithms>`"
msgstr ""

#: ../../guide/jwt.rst:204
msgid "Here is an example of a JWT with \"alg\" of ``RS256`` in JWS type:"
msgstr ""

#: ../../guide/jwt.rst:223
msgid ""
"In production, ``jwt.encode`` is usually used by the *client* side, a "
"client normally does not have the access to private keys. The server "
"provider would usually expose the public keys in JWK Set."
msgstr ""

#: ../../guide/jwt.rst:228
msgid "Use key set"
msgstr ""

#: ../../guide/jwt.rst:230
msgid ""
"You can also pass a JWK Set to the ``key`` parameter of :meth:`encode` "
"and :meth:`decode` methods."
msgstr ""

#: ../../guide/jwt.rst:247
msgid ""
"The methods will find the correct key according to the ``kid`` you "
"specified. If there is no ``kid`` in header, it will pick on randomly and"
" add the ``kid`` of the key into header."
msgstr ""

#: ../../guide/jwt.rst:251
msgid ""
"A client would usually get the public key set from a public URL, normally"
" the ``decode`` code would be something like:"
msgstr ""

#: ../../guide/jwt.rst:267
msgid "Callable key"
msgstr ""

#: ../../guide/jwt.rst:269
msgid "It is also possible to assign a callable function as the ``key``:"
msgstr ""

#: ../../guide/jwt.rst:290
msgid ""
"The :meth:`encode` and :meth:`decode` accept an ``algorithms`` parameter "
"for specifying the allowed algorithms. By default, it only allows your to"
" use recommended algorithms."
msgstr ""

#: ../../guide/jwt.rst:294
msgid "You can find out the recommended algorithms at:"
msgstr ""

#: ../../guide/jwt.rst:299
msgid ""
"For instance, ``HS386`` is not a recommended algorithm, and you want to "
"use this algorithm:"
msgstr ""

#: ../../guide/jwt.rst:310
msgid ""
"If not specifying the ``algorithms`` parameter, the ``encode`` method "
"will raise an error."
msgstr ""

#: ../../guide/registry.rst:6
msgid "Registry"
msgstr "注册表"

#: ../../guide/registry.rst:11
msgid ""
"The ``registry`` is specifically designed to store supported algorithms, "
"allowed algorithms, registered header parameters, and provides methods to"
" validate algorithms and headers."
msgstr ""

#: ../../guide/registry.rst:17
msgid ""
"We'll use ``JWSRegistry`` as our reference, but keep in mind that the "
"behavior of ``JWERegistry`` is identical."
msgstr ""

#: ../../guide/registry.rst:23
msgid ""
"The ``JWSRegistry`` or ``JWERegistry`` serves as a storage for all "
"supported algorithms in JWS or JWE. By default, it enforces the usage of "
"recommended algorithms, ensuring a higher level of security."
msgstr ""

#: ../../guide/registry.rst:27
msgid "Find all the supported and recommended algorithms in:"
msgstr ""

#: ../../guide/registry.rst:29
msgid ":ref:`jws_algorithms`"
msgstr ""

#: ../../guide/registry.rst:30
msgid ":ref:`jwe_algorithms`"
msgstr ""

#: ../../guide/registry.rst:32
msgid ""
"You have the flexibility to create a custom registry tailored to your "
"specific program requirements, allowing you to define and restrict the "
"algorithms used. For instance, you can design a custom JWS registry that "
"only permits the usage of ``RS256`` and ``ES256`` algorithms. This "
"ensures that only these specific algorithms are allowed in your program."
msgstr ""

#: ../../guide/registry.rst:45
msgid ""
"An example of a custom JWE registry that only permits the usage of "
"``{\"alg\": \"A128KW\", \"enc\": \"A128GCM\"}``:"
msgstr ""

#: ../../guide/registry.rst:56
msgid "Headers"
msgstr ""

#: ../../guide/registry.rst:58
msgid ""
"By default, the ``JWSRegistry`` only permits the usage of registered "
"header parameters. Additionally, it verifies the validity of the header "
"parameter values before allowing their usage."
msgstr ""

#: ../../guide/registry.rst:63
msgid "Type checking"
msgstr "类型检查"

#: ../../guide/registry.rst:65
msgid ""
"The header parameter registry for JWS and JWE performs an initial check "
"on the value type."
msgstr ""

#: ../../guide/registry.rst:82
msgid ""
"In the above example, ``kid`` MUST be a string instead of an integer. The"
" default registry validates the ``kid`` before processing the "
"serialization."
msgstr ""

#: ../../guide/registry.rst:86
msgid "Critical headers"
msgstr ""

#: ../../guide/registry.rst:88
msgid ""
"There is a special \"crit\" header parameter for JWS and JWE, which "
"specifies the critical header parameters. These critical parameters are "
"considered mandatory, indicating that they must be present. For example:"
msgstr ""

#: ../../guide/registry.rst:106
msgid ""
"Since \"kid\" is listed as a critical (``crit``) header parameter, it is "
"mandatory and must be included in the header."
msgstr ""

#: ../../guide/registry.rst:110
msgid "Additional headers"
msgstr ""

#: ../../guide/registry.rst:112
msgid ""
"By default, the registry for JWS and JWE only permits registered header "
"parameters. Any additional header beyond those supported by the algorithm"
" will result in an error."
msgstr ""

#: ../../guide/registry.rst:129
msgid ""
"To resolve this error, you have two options. First, you can register the "
"additional header parameters with the registry. This allows the registry "
"to recognize and validate those parameters instead of raising an error."
msgstr ""

#: ../../guide/registry.rst:150
msgid ""
"Alternatively, you can choose to disable the strict header checking "
"altogether. By turning off strict header checking, the registry will no "
"longer raise an error for unrecognized header parameters. However, please"
" note that this approach may compromise the security and integrity of the"
" token, so it should be used with caution."
msgstr ""

#: ../../guide/registry.rst:162
msgid "Registry for JWT"
msgstr ""

#: ../../guide/registry.rst:164
msgid ""
"JSON Web Token (JWT) is built on top of :ref:`jws` or :ref:`jwe`. The "
"``encode`` and ``decode`` methods accept a ``registry`` parameter. "
"Depending on the algorithm of the JWT, you need to decide whether to use "
"``JWSRegistry`` or ``JWERegistry``."
msgstr ""
